from cryptography.fernet import Fernet
from typing import Optional

class UserCryptoManager:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É Telegram –±–æ—Ç—ñ"""

    def __init__(self, key: Optional[bytes] = None):
        self._key: Optional[bytes] = None
        self._cipher: Optional[Fernet] = None

        if key:
            self.key = key  # –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ setter

    # === GETTER –¥–ª—è –∫–ª—é—á–∞ ===
    @property
    def key(self) -> Optional[bytes]:
        return self._key

    # === SETTER –¥–ª—è –∫–ª—é—á–∞ ===
    @key.setter
    def key(self, new_key: bytes):
        if not isinstance(new_key, bytes):
            raise TypeError("–ö–ª—é—á –º–∞—î –±—É—Ç–∏ —Ç–∏–ø—É bytes!")
        self._key = new_key
        self._cipher = Fernet(self._key)
        print("üîë –ö–ª—é—á –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")

    # === –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ ===
    @staticmethod
    def generate_key() -> bytes:
        return Fernet.generate_key()

    # === –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É ===
    def encrypt(self, text: str) -> bytes:
        if not self._cipher:
            raise ValueError("–°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ –∫–ª—é—á!")
        return self._cipher.encrypt(text.encode())

    # === –†–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É ===
    def decrypt(self, token: bytes) -> str:
        if not self._cipher:
            raise ValueError("–°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ –∫–ª—é—á!")
        return self._cipher.decrypt(token).decode()


# b = UserCryptoManager(key=b'qSYkYI2eLCQ77FKonsz4Vmt3051saKlPRFxCxsLjWAk=')
# text = b.encrypt("hello world")
# print(text)

# d = b.decrypt(b'gAAAAABo9nbmFj-nUg5BEmgMkT-JTllBl1NPaF60GiP-KOXIKpJQbuVaJV0hQ241lpeoORn-lvtQiT2udAIHRsunsKLAtaeUcQ==')
# print(d)